package com.example.demo.ASM.Controller;

import com.example.demo.ASM.Model.PhieuMuon;
import com.example.demo.ASM.Model.ThietBi;
import com.example.demo.ASM.Repo.PhieuMuonRepo;
import com.example.demo.ASM.Repo.ThietBiRepo;
import com.example.demo.ASM.Service.MuonTraService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@Controller
@RequestMapping("/phieu-muon")
@RequiredArgsConstructor
public class PhieuMuonController {

    private final PhieuMuonRepo phieuMuonRepo;
    private final ThietBiRepo thietBiRepo;
    private final MuonTraService muonTraService;

    // üü¢ Hi·ªÉn th·ªã danh s√°ch phi·∫øu m∆∞·ª£n
    @GetMapping
    public String getAll(
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fromDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate toDate,
            @RequestParam(required = false) Integer thietBiId,
            @RequestParam(defaultValue = "maPhieu") String sortField,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(defaultValue = "0") int page,              // ‚úÖ th√™m ph√¢n trang
            @RequestParam(defaultValue = "10") int size,             // ‚úÖ s·ªë d√≤ng m·ªói trang
            Model model,
            HttpSession session
    ) {
        Specification<PhieuMuon> spec = Specification
                .where(PhieuMuonSpecification.keyword(keyword))
                .and(PhieuMuonSpecification.ngayMuonBetween(fromDate, toDate))
                .and(PhieuMuonSpecification.byThietBiId(thietBiId));

        Sort sort = sortDir.equalsIgnoreCase("asc")
                ? Sort.by(sortField).ascending()
                : Sort.by(sortField).descending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<PhieuMuon> pagePhieuMuon = phieuMuonRepo.findAll(spec, pageable);

        model.addAttribute("dsPhieuMuon", pagePhieuMuon.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", pagePhieuMuon.getTotalPages());
        model.addAttribute("totalItems", pagePhieuMuon.getTotalElements());
        model.addAttribute("pageSize", size);

        model.addAttribute("dsThietBi", thietBiRepo.findByTinhTrangTrueAndDaMuonFalse());
        model.addAttribute("keyword", keyword);
        model.addAttribute("fromDate", fromDate);
        model.addAttribute("toDate", toDate);
        model.addAttribute("thietBiId", thietBiId);
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Phi·∫øu M∆∞·ª£n");
        model.addAttribute("activePage", "phieu");

        Object message = session.getAttribute("message");
        if (message != null) {
            model.addAttribute("message", message);
            session.removeAttribute("message");
        }

        return "phieu-muon-list";
    }




    // üü¢ Th√™m phi·∫øu m∆∞·ª£n m·ªõi ‚Äî cho ph√©p ch·ªçn ng√†y m∆∞·ª£n
    @PostMapping("/add")
    public String add(@RequestParam String maPhieu,
                      @RequestParam LocalDate ngayMuon,
                      @RequestParam(value = "thietBiIds", required = false) List<Integer> thietBiIds,
                      HttpSession session) {
        try {
            if (thietBiIds == null || thietBiIds.isEmpty()) {
                throw new RuntimeException("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 thi·∫øt b·ªã ƒë·ªÉ m∆∞·ª£n!");
            }

            muonTraService.taoPhieuMuon(thietBiIds, maPhieu, ngayMuon);

            // ‚úÖ L∆∞u th√¥ng b√°o v√† m√£ phi·∫øu v√†o Session
            session.setAttribute("lastMaPhieu", maPhieu);
            session.setAttribute("message", "ƒê√£ th√™m phi·∫øu m∆∞·ª£n " + maPhieu + " th√†nh c√¥ng!");

            return "redirect:/phieu-muon";
        } catch (Exception e) {
            e.printStackTrace();
            session.setAttribute("message", "‚ùå L·ªói khi th√™m phi·∫øu: " + e.getMessage());
            return "redirect:/phieu-muon";
        }
    }

    // üü¢ Tr·∫£ phi·∫øu ‚Äî t·ª± ƒë·ªông set ng√†y tr·∫£ = LocalDate.now()
    @GetMapping("/return/{id}")
    public String traPhieu(@PathVariable Integer id, HttpSession session) {
        try {
            PhieuMuon pm = phieuMuonRepo.findById(id).orElse(null);
            if (pm != null) {
                muonTraService.traHetPhieu(id);
                session.setAttribute("message", "‚úÖ ƒê√£ tr·∫£ th√†nh c√¥ng phi·∫øu m∆∞·ª£n " + pm.getMaPhieu());
            } else {
                session.setAttribute("message", "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n c√≥ ID: " + id);
            }
        } catch (Exception e) {
            e.printStackTrace();
            session.setAttribute("message", "‚ùå L·ªói khi tr·∫£ phi·∫øu: " + e.getMessage());
        }
        return "redirect:/phieu-muon";
    }


    @GetMapping("/delete/{id}")
    public String delete(@PathVariable Integer id, HttpSession session) {
        try {
            PhieuMuon pm = phieuMuonRepo.findById(id).orElse(null);
            if (pm != null) {
                muonTraService.traHetPhieu(id);
                phieuMuonRepo.delete(pm);
                session.setAttribute("message", "üóëÔ∏è ƒê√£ x√≥a phi·∫øu m∆∞·ª£n " + pm.getMaPhieu() + " th√†nh c√¥ng!");
            } else {
                session.setAttribute("message", "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n c√≥ ID: " + id);
            }
        } catch (Exception e) {
            e.printStackTrace();
            session.setAttribute("message", "‚ùå L·ªói khi x√≥a phi·∫øu: " + e.getMessage());
        }
        return "redirect:/phieu-muon";
    }


    // üü¢ Hi·ªÉn th·ªã form s·ª≠a phi·∫øu
    @GetMapping("/edit/{id}")
    public String editForm(@PathVariable Integer id, Model model) {
        PhieuMuon pm = phieuMuonRepo.findById(id).orElse(null);
        if (pm == null) {
            return "redirect:/phieu-muon";
        }
        model.addAttribute("pm", pm);
        // ‚úÖ Ch·ªâ hi·ªÉn th·ªã thi·∫øt b·ªã c√≤n ho·∫°t ƒë·ªông (tinhTrang = true)
        model.addAttribute("dsThietBi", thietBiRepo.findByTinhTrangTrue());
        model.addAttribute("pageTitle", "S·ª≠a Phi·∫øu M∆∞·ª£n");
        model.addAttribute("activePage", "phieu");
        return "phieu-muon-edit";
    }

    // üü¢ C·∫≠p nh·∫≠t phi·∫øu m∆∞·ª£n
    @PostMapping("/update")
    public String update(@ModelAttribute PhieuMuon pm,
                         @RequestParam(value = "thietBiIds", required = false) List<Integer> thietBiIds) {

        PhieuMuon oldPm = phieuMuonRepo.findById(pm.getId()).orElse(null);
        if (oldPm == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n ID: " + pm.getId());
        }

        List<ThietBi> oldList = oldPm.getThietBis();
        List<ThietBi> newList = (thietBiIds != null)
                ? thietBiRepo.findAllById(thietBiIds)
                : List.of();

        // üü° 1Ô∏è‚É£ Tr·∫£ l·∫°i thi·∫øt b·ªã b·ªã b·ªè ch·ªçn
        for (ThietBi tb : oldList) {
            if (!newList.contains(tb)) {
                tb.setDaMuon(false);
                thietBiRepo.save(tb);
            }
        }

        // üü¢ 2Ô∏è‚É£ ƒê√°nh d·∫•u c√°c thi·∫øt b·ªã m·ªõi m∆∞·ª£n th√™m
        for (ThietBi tb : newList) {
            if (!oldList.contains(tb)) {
                tb.setDaMuon(true);
                thietBiRepo.save(tb);
            }
        }

        // üü£ 3Ô∏è‚É£ C·∫≠p nh·∫≠t l·∫°i phi·∫øu
        oldPm.setMaPhieu(pm.getMaPhieu());
        oldPm.setNgayMuon(pm.getNgayMuon());
        oldPm.setThietBis(newList);
        oldPm.setTrangThai(pm.getTrangThai()); // ch·ªâ ƒë·ªçc trong form

        phieuMuonRepo.save(oldPm);

        return "redirect:/phieu-muon";
    }
}
